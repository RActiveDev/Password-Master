/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package passwordMaster;

import Other.Settings;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author nikos
 */
public class PasswordGenerator extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(PasswordGenerator.class.getName());

    private final File pmg = new File(Settings.getDirectory() + Settings.getFolderSlash() + "PasswordMasterGenerator.ini");

    private final String[] defaultLowercase = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
    private final String[] defaultUppercase = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
    private final String[] defaultNumbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
    private final String[] defaultSymbols = {"!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "[", "{", "]", "}", "?", "|"};

    String[] lowercase = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
    String[] uppercase = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
    String[] numbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
    String[] symbols = {"!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "[", "{", "]", "}", "?", "|"};
    
    boolean lowercaseSelected,
            uppercaseSelected,
            numbersSelected,
            symbolsSelected;

    ArrayList<String> password;
    
    int length;

    Random rnd = new Random();

    /**
     * Creates new form PasswordGenerator
     */
    public PasswordGenerator() {
        length = 8;
        lowercaseSelected = true;
        uppercaseSelected = false;
        numbersSelected = true;
        symbolsSelected = false;
        initComponents();
        initSettings();
        importGenerator();
        initGenerator();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lowercaseField = new javax.swing.JTextField();
        lowercaseCB = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        uppercaseField = new javax.swing.JTextField();
        uppercaseCB = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        symbolCB = new javax.swing.JCheckBox();
        symbolField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        numberCB = new javax.swing.JCheckBox();
        numberField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lengthField = new javax.swing.JTextField();
        passwordField = new javax.swing.JTextField();
        copyButton = new javax.swing.JButton();
        generatePasswordButton = new javax.swing.JButton();
        restoreDefaultsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        lowercaseCB.setSelected(true);
        lowercaseCB.setText("Lowercase Letters");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(lowercaseCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowercaseField))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowercaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowercaseCB))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        uppercaseCB.setText("Uppercase Letters");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(uppercaseCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uppercaseField))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uppercaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uppercaseCB))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        symbolCB.setText("Symbols");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(symbolCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(symbolField))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symbolCB)
                    .addComponent(symbolField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        numberCB.setSelected(true);
        numberCB.setText("Numbers");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(numberCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberField))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberCB)
                    .addComponent(numberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setText("Length:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lengthField))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
        );

        passwordField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        copyButton.setText("Copy to clipboard");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        generatePasswordButton.setText("Generate Password");
        generatePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePasswordButtonActionPerformed(evt);
            }
        });

        restoreDefaultsButton.setText("Restore Defaults");
        restoreDefaultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreDefaultsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(restoreDefaultsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generatePasswordButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generatePasswordButton)
                    .addComponent(copyButton)
                    .addComponent(restoreDefaultsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generatePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePasswordButtonActionPerformed
        createPassword();
    }//GEN-LAST:event_generatePasswordButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        String myString = passwordField.getText();
        if(myString.contains("copied to clipboard.")){
            myString = myString.replace("Password ", "");
            myString = myString.replace(" copied to clipboard.", "");
        }
        StringSelection stringSelection = new StringSelection(myString);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
        passwordField.setText("Password " + myString + " copied to clipboard.");
    }//GEN-LAST:event_copyButtonActionPerformed

    private void restoreDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreDefaultsButtonActionPerformed
        initDefaultTextFields();
    }//GEN-LAST:event_restoreDefaultsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JButton generatePasswordButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField lengthField;
    private javax.swing.JCheckBox lowercaseCB;
    private javax.swing.JTextField lowercaseField;
    private javax.swing.JCheckBox numberCB;
    private javax.swing.JTextField numberField;
    private javax.swing.JTextField passwordField;
    private javax.swing.JButton restoreDefaultsButton;
    private javax.swing.JCheckBox symbolCB;
    private javax.swing.JTextField symbolField;
    private javax.swing.JCheckBox uppercaseCB;
    private javax.swing.JTextField uppercaseField;
    // End of variables declaration//GEN-END:variables

    private void initSettings() {
        setTitle("Password Generator");
        setLocationRelativeTo(null);
        setResizable(false);
        setAlwaysOnTop(true);
        WindowListener exitListener = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                saveAndDispose();
            }
        };
        addWindowListener(exitListener);
    }

    public void showWindow(boolean status) {
        setVisible(status);
        passwordField.setText("");
    }

    private void initGenerator() {
        initTextFields();
        initCheckBoxes();
        initLength();
    }
    
    private void initTextFields(){
        passwordField.setText("");

        StringBuilder temp = new StringBuilder();
        for (String s : lowercase) {
            temp.append("," + s);
        }
        String tempS = temp.toString();
        lowercaseField.setText(tempS.replaceFirst(",", ""));

        temp = new StringBuilder();
        for (String s : uppercase) {
            temp.append("," + s);
        }
        tempS = temp.toString();
        uppercaseField.setText(tempS.replaceFirst(",", ""));

        temp = new StringBuilder();
        for (String s : numbers) {
            temp.append("," + s);
        }
        tempS = temp.toString();
        numberField.setText(tempS.replaceFirst(",", ""));

        temp = new StringBuilder();
        for (String s : symbols) {
            temp.append("," + s);
        }
        tempS = temp.toString();
        symbolField.setText(tempS.replaceFirst(",", ""));
    }
    
    private void initCheckBoxes(){
        lowercaseCB.setSelected(lowercaseSelected);
        uppercaseCB.setSelected(uppercaseSelected);
        symbolCB.setSelected(symbolsSelected);
        numberCB.setSelected(numbersSelected);
    }
    
    private void initLength(){
        lengthField.setText(length+"");
    }

    private void initDefaultTextFields() {
        passwordField.setText("");

        StringBuilder temp = new StringBuilder();
        for (String s : defaultLowercase) {
            temp.append("," + s);
        }
        String tempS = temp.toString();
        lowercaseField.setText(tempS.replaceFirst(",", ""));

        temp = new StringBuilder();
        for (String s : defaultUppercase) {
            temp.append("," + s);
        }
        tempS = temp.toString();
        uppercaseField.setText(tempS.replaceFirst(",", ""));

        temp = new StringBuilder();
        for (String s : defaultNumbers) {
            temp.append("," + s);
        }
        tempS = temp.toString();
        numberField.setText(tempS.replaceFirst(",", ""));

        temp = new StringBuilder();
        for (String s : defaultSymbols) {
            temp.append("," + s);
        }
        tempS = temp.toString();
        symbolField.setText(tempS.replaceFirst(",", ""));

        lengthField.setText("8");
    }

    private void createPassword() {
        getEverything();
        password = new ArrayList();
        int selectedArrays = 0;
        if (lowercaseSelected) {
            selectedArrays++;
        }
        if (uppercaseSelected) {
            selectedArrays++;
        }
        if (symbolsSelected) {
            selectedArrays++;
        }
        if (numbersSelected) {
            selectedArrays++;
        }

        int counter = length / selectedArrays;

        if (lowercaseSelected) {
            getRandomLowercaseLetters(counter);
        }
        if (uppercaseSelected) {
            getRandomUppercaseLetters(counter);
        }
        if (symbolsSelected) {
            getRandomSymbols(counter);
        }
        if (numbersSelected) {
            getRandomNumbers(counter);
        }

        if (password.size() < length) {
            getRandomLowercaseLetters(length - password.size());
        }

        StringBuilder output = new StringBuilder(password.size());
        while (!password.isEmpty()) {
            int randPicker = rnd.nextInt(password.size());
            output.append(password.remove(randPicker));
        }
        passwordField.setText(output.toString());
    }
    
    private void getEverything(){
        getArrays();
        getSelectedCheckBoxes();
        getLength();
    }
    
    private void getSelectedCheckBoxes(){
        if (lowercaseCB.isSelected()) {
            lowercaseSelected = true;
        }
        if (uppercaseCB.isSelected()) {
            uppercaseSelected = true;
        }
        if (symbolCB.isSelected()) {
            symbolsSelected = true;
        }
        if (numberCB.isSelected()) {
            numbersSelected = true;
        }
    }
    
    private void getLength(){
        length = 0;
        try {
            length = new Integer(lengthField.getText());
        } catch (NumberFormatException ex) {
            length = 8;
        }
    }

    private void getRandomLowercaseLetters(int counter) {
        for (int i = 0; i < counter; i++) {
            int index = rnd.nextInt(lowercase.length - 1);
            password.add(lowercase[index]);
        }
    }

    private void getRandomUppercaseLetters(int counter) {
        for (int i = 0; i < counter; i++) {
            int index = rnd.nextInt(uppercase.length - 1);
            password.add(uppercase[index]);
        }
    }

    private void getRandomSymbols(int counter) {
        for (int i = 0; i < counter; i++) {
            int index = rnd.nextInt(symbols.length - 1);
            password.add(symbols[index]);
        }
    }

    private void getRandomNumbers(int counter) {
        for (int i = 0; i < counter; i++) {
            int index = rnd.nextInt(numbers.length - 1);
            password.add(numbers[index]);
        }
    }

    private void getArrays() {
        String lc = lowercaseField.getText();
        lowercase = lc.split(",");

        String uc = uppercaseField.getText();
        uppercase = uc.split(",");

        String s = symbolField.getText();
        symbols = s.split(",");

        String n = numberField.getText();
        numbers = n.split(",");
        getLength();
    }

    public void saveAndDispose() {
        getArrays();
        BufferedWriter bw = null;
        try {
            if (!pmg.exists()) {
                pmg.createNewFile();
            }
            bw = new BufferedWriter(new FileWriter(pmg));
            writeLowercaseString(bw);
            writeUppercaseString(bw);
            writeNumbersString(bw);
            writeSymbolsString(bw);
            bw.write("length="+length);
            bw.close();
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, null, ex);
        }
        showWindow(false);
    }

    private void writeLowercaseString(BufferedWriter bw) throws IOException {
        String result = "";
        StringBuilder sb = new StringBuilder();
        for (String s : lowercase) {
            sb.append("," + s);
        }
        result += "lowercase=" + sb.toString().replaceFirst(",", "");
        bw.write(result);
        bw.newLine();
        bw.write("lowercaseSelected=" + lowercaseSelected);
        bw.newLine();
    }

    private void writeUppercaseString(BufferedWriter bw) throws IOException {
        String result = "";
        StringBuilder sb = new StringBuilder();
        for (String s : uppercase) {
            sb.append("," + s);
        }
        result += "uppercase=" + sb.toString().replaceFirst(",", "");
        bw.write(result);
        bw.newLine();
        bw.write("uppercaseSelected=" + uppercaseSelected);
        bw.newLine();
    }

    private void writeNumbersString(BufferedWriter bw) throws IOException {
        String result = "";
        StringBuilder sb = new StringBuilder();
        for (String s : numbers) {
            sb.append("," + s);
        }
        result += "numbers=" + sb.toString().replaceFirst(",", "");
        bw.write(result);
        bw.newLine();
        bw.write("numbersSelected=" + numbersSelected);
        bw.newLine();
    }

    private void writeSymbolsString(BufferedWriter bw) throws IOException {
        String result = "";
        StringBuilder sb = new StringBuilder();
        for (String s : symbols) {
            sb.append("," + s);
        }
        result += "symbols=" + sb.toString().replaceFirst(",", "");
        bw.write(result);
        bw.newLine();
        bw.write("symbolsSelected=" + symbolsSelected);
        bw.newLine();
    }

    private void importGenerator() {
        BufferedReader br = null;
        try {
            if (!pmg.exists()) {
                return;
            }
            br = new BufferedReader(new FileReader(pmg));
            String str = "";
            while ((str = br.readLine()) != null) {
                handleString(str);
            }
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, null, ex);
        }
        showWindow(false);
    }

    private void handleString(String str) {
        if (str.contains("lowercase=")) {
            str = str.replace("lowercase=", "");
            lowercase = str.split(",");
        } else if (str.contains("uppercase=")) {
            str = str.replace("uppercase=", "");
            uppercase = str.split(",");
        } else if (str.contains("numbers=")) {
            str = str.replace("numbers=", "");
            numbers = str.split(",");
        } else if (str.contains("symbols=")) {
            str = str.replace("symbols=", "");
            symbols = str.split(",");
        } else if (str.contains("length")){
            str = str.replace("length=", "");
            try{
                length = new Integer(str);
            } catch(NumberFormatException ex){
                length = 8;
            }
        } else if (str.contains("lowercaseSelected=")) {
            str = str.replace("lowercaseSelected=", "");
            lowercaseSelected = Boolean.valueOf(str);
        } else if (str.contains("uppercaseSelected=")) {
            str = str.replace("uppercaseSelected=", "");
            uppercaseSelected = Boolean.valueOf(str);
        } else if (str.contains("numbersSelected=")) {
            str = str.replace("numbersSelected=", "");
            numbersSelected = Boolean.valueOf(str);
        } else if (str.contains("symbolsSelected=")) {
            str = str.replace("symbolsSelected=", "");
            symbolsSelected = Boolean.valueOf(str);
        } 
    }
}
